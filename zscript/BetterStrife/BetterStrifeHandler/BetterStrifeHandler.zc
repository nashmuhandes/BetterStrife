// Copyright 2021 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// BetterStrifeHandler
//
//===========================================================================

class BetterStrifeHandler : EventHandler
{
	// exit lines that have already been marked
	Array<Line> markedExitLines;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void PlayerEntered(PlayerEvent e)
	{
		let pmo = players[e.PlayerNumber].mo;
		if (pmo)
		{
			SetupPlayer(pmo);
		}
	}

	override void PlayerRespawned(PlayerEvent e)
	{
		let pmo = players[e.PlayerNumber].mo;
		if (pmo)
		{
			ResurrectPlayer(pmo);
		}
	}

	override void PlayerDied(PlayerEvent e)
	{
	}

	override void PlayerDisconnected(PlayerEvent e)
	{
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void WorldThingSpawned(WorldEvent e)
	{
		if (!e.Thing) return;
		Actor mo = e.Thing;
		ApplyActorBillboarding(mo);
		FixMerchant(mo);
		FixOracle(mo);
		FixWaterFountain(mo);
	}

	override void WorldTick(void)
	{
		MarkExitLines();
	}

	override void WorldUnloaded(WorldEvent e)
	{
		// destroy player flashlight dynamic lights when leaving the level
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i])
			{
				let pmo = players[i].mo;
				if (pmo)
				{
					let plugin = BetterStrifePlayerPlugin.Find(pmo);
					if (plugin && plugin.flashlight)
					{
						plugin.flashlight.Destroy();
					}
				}
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void NetworkProcess(ConsoleEvent e)
	{
		PlayerPawn pmo = PlayerPawn(players[e.Player].mo);
		if (!pmo) return;
		if (pmo && !pmo.player) return;

		bool isConsolePlayer = (pmo == PlayerPawn(players[consoleplayer].mo));

		//===========================================================================
		//
		// EV_ToggleFlashlight
		//
		//===========================================================================
		if (e.Name == 'EV_ToggleFlashlight')
		{
			ToggleFlashlight(pmo);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SetupPlayer(PlayerPawn pmo)
	{
		if (!pmo) return;
		//Console.Printf("SetupPlayer() running for player %d", pmo.PlayerNumber() + 1);

		// enable player plugin
		pmo.A_GiveInventory("BetterStrifePlayerPlugin", 1);

		// give flashlight toggler
		pmo.A_GiveInventory("BetterStrifePlayerFlashlight", 1);

		// increase JumpZ just enough to enable the squatting animation
		pmo.JumpZ *= 1.00000000001;

		// if flashlight is avaiable and is turned on, spawn the dynamic light
		let plugin = BetterStrifePlayerPlugin.Find(pmo);
		if (plugin && plugin.isFlashLightOn && !plugin.flashlight)
		{
			plugin.SpawnFlashlight();
		}
	}

	void ResurrectPlayer(PlayerPawn pmo)
	{
		if (!pmo) return;
		//Console.Printf("ResurrectPlayer() running for player %d", pmo.PlayerNumber() + 1);
		SetupPlayer(pmo);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void ToggleFlashlight(PlayerPawn pmo)
	{
		let plugin = BetterStrifePlayerPlugin.Find(pmo);
		if (!plugin) return;

		plugin.isFlashlightOn = !plugin.isFlashlightOn;

		if (plugin.isFlashlightOn)
		{
			plugin.SpawnFlashlight();
		}
		else
		{
			plugin.DestroyFlashlight();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void ApplyActorBillboarding(Actor mo)
	{
		bool isProjectile =
		(
			mo.bMissile ||
			mo is "FastProjectile" ||
			mo is "SpectralLightningBase"
		);

		bool isFX =
		(
			// Strife
			mo is "StrifePuff" ||
			mo is "MaulerPuff" ||
			mo is "PhosphorousFire" ||

			// Misc
			mo is "GlassJunk" ||
			mo is "TeleportFog"
		);

		bool isBlood =
		(
			mo is "Blood"
		);

		bool isSmokeTrail =
		(
			mo is "RocketSmokeTrail" ||
			mo is "GrenadeSmokeTrail" ||
			mo is "RocketTrail"
		);

		bool isWaterSplashChunk =
		(
			mo is "WaterSplash" ||
			mo is "LavaSmoke" ||
			mo is "SludgeChunk" ||
			mo is "BloodSplash" ||
			mo is "SlimeChunk"
		);

		bool isBillboardedMonster =
		(
			mo is "Stalker" ||
			mo is "Sentinel" ||
			mo is "KlaxonWarningLight" ||
			mo is "CeilingTurret" ||
			mo is "SpectralMonster"
		);

		bool isGib =
		(
			mo is "Junk" ||
			mo is "Meat"
		);

		bool isItem =
		(
			mo is "Inventory"
		);

		bool isExcluded =
		(
			mo is "SpectralLightningV1" ||
			mo is "SpectralLightningV2" ||
			mo is "SpectralLightningBigV1" ||
			mo is "SpectralLightningBigV2"
		);


		if (isProjectile || isFX || isBlood || isSmokeTrail || isWaterSplashChunk || isBillboardedMonster || isGib || isItem)
		{
			mo.bForceXYBillboard = !isExcluded;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void FixMerchant(Actor mo)
	{
		if (mo is "Merchant")
		{
			mo.bIsMonster = true;
			mo.bFriendly = true;
			mo.StartHealth = 20;
			mo.A_SetHealth(mo.GetMaxHealth(true));
		}
	}

	void FixOracle(Actor mo)
	{
		if (mo is "Oracle")
		{
			mo.A_GiveInventory("BetterStrifeOraclePlugin", 1);
			mo.StartHealth = 1200;
			mo.A_SetHealth(mo.GetMaxHealth(true));
		}
	}

	void FixWaterFountain(Actor mo)
	{
		if (mo is "WaterFountain")
		{
			mo.ActiveSound = "world/waterfountain";
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void MarkExitLines(void)
	{
		if (Level.time == 0) return;

		// look for lines to place an exit marker at.
		// probably shouldn't do this every world tick...
		for (int i = 0; i < Level.Lines.Size(); i++)
		{
			Line ln = Level.Lines[i];
			if (ln.special == ACS_ExecuteAlways && (ln.args[2] == 145 || ln.args[2] == 186))
			{
				// make sure the line hasn't been added yet
				if (markedExitLines.Find(ln) == markedExitLines.Size())
				{
					// find middle of line
					Vector2 xyPos = ln.v1.p + ln.delta / 2;
					double zPos = Level.PointInSector(xyPos).floorplane.ZatPoint(xyPos);
					Vector3 sPos = (xyPos.X, xyPos.Y, zPos);

					// spawn marker
					let marker = BetterStrifeExitMarker(Actor.Spawn("BetterStrifeExitMarker", sPos, NO_REPLACE));
					if (marker)
					{
						// store tagged exit so that the map name can be read later
						int tag = ln.args[3];
						marker.exitTag = tag / 100;

						// look for other markers that are too close
						BlockThingsIterator it = BlockThingsIterator.Create(marker, 64.);
						while (it.Next())
						{
							let otherMarker = it.Thing;
							if (!(otherMarker is "BetterStrifeExitMarker")) continue;

							// skip self
							if (otherMarker == marker) continue;

							// too far, good
							if (marker.Distance2DSquared(otherMarker) > 64. * 64.)
							{
								continue;
							}
							// too close, destroy
							else if (marker.Distance2DSquared(otherMarker) <= 64. * 64.)
							{
								otherMarker.Destroy();
							}
						}
					}

					// add to list of marked lines
					markedExitLines.Push(ln);
					//Console.Printf("spawned exit map marker at %d/%d/%d", sPos.X, sPos.Y, sPos.Z);
				}
			}
		}
	}
}
