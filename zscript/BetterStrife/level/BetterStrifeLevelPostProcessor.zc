// Copyright 2021 - 2024 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// BetterStrifeLevelPostProcessor
//
//===========================================================================

class BetterStrifeLevelPostProcessor : LevelPostProcessor
{
	protected void Apply(Name checksum, String mapname)
	{
		SpawnStrifeQuestMarkers(checksum, mapname);
		SpawnSVEQuestMarkers(checksum, mapname);
		//SpawnExtraMerchants(checksum, mapname);
		SpawnTavernAmbience(checksum, mapname);
		FixMaps(checksum, mapname);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SpawnExtraMerchants(Name checksum, String mapname)
	{
		int t;
		int p;

		switch (checksum)
		{
		default:
		case 'none':
			return;
		}
	}

	void SpawnTavernAmbience(Name checksum, String mapname)
	{
		int t;
		int p;

		// place tavern ambience and assign an NPC to it (via TID) for sound volume functions
		int tid = 5555500;

		switch (checksum)
		{
		default:
		case 'none':
			return;

		case '22DC1F95CD9A03D23467FD638264FFBC': // strife1.wad map02 - Town
		case 'A4ABA612A8FE682787DEBEAF70637836': // sve.wad map02 - Town
			t = AddThing(15555, (2120, 4640, 16), 0); tid++; SetThingID(t, tid); SetThingID(73, tid);
			t = AddThing(15555, (2040, 4472, 0), 0); tid++; SetThingID(t, tid); SetThingID(68, tid);
			t = AddThing(15555, (1984, 4248, 32), 0); tid++; SetThingID(t, tid); SetThingID(90, tid);
			t = AddThing(15555, (2592, 4256, 35), 0); tid++; SetThingID(t, tid); SetThingID(91, tid);
			t = AddThing(15555, (2592, 4416, 0), 0); tid++; SetThingID(t, tid); SetThingID(113, tid);
			t = AddThing(15555, (2576, 4704, 24), 0); tid++; SetThingID(t, tid); SetThingID(92, tid);
			t = AddThing(15555, (2208, 4704, 50), 0); tid++; SetThingID(t, tid); SetThingID(72, tid);
			t = AddThing(15555, (2312, 4440, 20), 0); tid++; SetThingID(t, tid); SetThingID(71, tid);
			break;

		case '777F7085371D7020872E10089AADB764': // strife1.wad map23 - Order Commons
		case '13BDF7D41E33E302D21234316A600BBA': // sve.wad map23 - Order Commons
			t = AddThing(15555, (2176, 320, 32), 0); tid++; SetThingID(t, tid); SetThingID(383, tid);
			t = AddThing(15555, (2176, 192, 32), 0); tid++; SetThingID(t, tid); SetThingID(341, tid);
			t = AddThing(15555, (1920, 256, 48), 0); tid++; SetThingID(t, tid); SetThingID(342, tid);
			t = AddThing(15555, (2080, 128, 56), 0); tid++; SetThingID(t, tid); SetThingID(340, tid);
			t = AddThing(15555, (2304, 192, 72), 0); tid++; SetThingID(t, tid); SetThingID(396, tid);
			t = AddThing(15555, (1920, 64, 64), 0); tid++; SetThingID(t, tid); SetThingID(390, tid);
			t = AddThing(15555, (2080, -128, 56), 0); tid++; SetThingID(t, tid); SetThingID(392, tid);
			t = AddThing(15555, (2272, -128, 48), 0); tid++; SetThingID(t, tid); SetThingID(395, tid);
			t = AddThing(15555, (2048, -448, 48), 0); tid++; SetThingID(t, tid); SetThingID(349, tid);
			t = AddThing(15555, (2208, -224, 88), 0); tid++; SetThingID(t, tid); SetThingID(399, tid);
			t = AddThing(15555, (2272, -352, 24), 0); tid++; SetThingID(t, tid); SetThingID(348, tid);
			break;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void FixMaps(Name checksum, String mapname)
	{
		switch (checksum)
		{
		default:
		case 'none':
			return;

		case '22DC1F95CD9A03D23467FD638264FFBC': // strife1.wad map02 - Town
		case 'A4ABA612A8FE682787DEBEAF70637836': // sve.wad map02 - Town
			// get rid of misplaced lamp in the void (only in the vanilla IWAD though)
			if (checksum == '22DC1F95CD9A03D23467FD638264FFBC')
				SetThingEdNum(260, 0);
			break;

		case '4A79D4C48352804FAB3557EE423ADAFE': // strife1.wad map07 - Castle
		case 'ECB3421D4C79C67EBC9342E0579F8804': // sve.wad map07 - Castle
			// Fix missing textures on the platform just before the entrance to The Programmer's Keep
			SetWallTexture(2778, Line.back, Side.bottom, "CONCRT01");
			SetWallTexture(2779, Line.back, Side.bottom, "CONCRT01");
			SetWallTexture(2780, Line.back, Side.bottom, "CONCRT01");
			SetWallTexture(2781, Line.back, Side.bottom, "CONCRT01");
			SetLineFlags(2778, Line.ML_DONTPEGTOP | Line.ML_DONTPEGBOTTOM);
			SetLineFlags(2779, Line.ML_DONTPEGTOP | Line.ML_DONTPEGBOTTOM);
			SetLineFlags(2780, Line.ML_DONTPEGTOP | Line.ML_DONTPEGBOTTOM);
			SetLineFlags(2781, Line.ML_DONTPEGTOP | Line.ML_DONTPEGBOTTOM);
			break;

		case '28CB8D6614024C51C8DB00C7ADBFD857': // strife1.wad map11 - Borderlands
		case '1097B8706E00273294389D1FEB5E94A5': // sve.wad map11 - Borderlands
			// Fix New Front Base teleporter flat offset
			Level.Sectors[224].AddXOffset(Sector.floor, -24.0);
			break;

		case 'E3E6ABE44B1C034F19385AD1B19BEC97': // strife1.wad map16 - Fortress: Bishop's Tower
		case '900B1CAC3AB7DF6C2FFB5C429C523FB7': // sve.wad map16 - Fortress: Bishop's Tower
			// Fix missing textures
			SetWallTexture(2827, Line.back, Side.bottom, "AZWAL04");
			SetWallTexture(2660, Line.back, Side.bottom, "AZWAL04");
			break;

		case '1240E48EE30E52D7742DC3785BC0C919': // strife1.wad map19 - Fortress: Security Complex
		case '5215723CBF14B74A0CB901473434576B': // sve.wad map19 - Fortress: Security Complex
			// Fix dead end caused by exiting Administration before destroying the computer
			// https://doomwiki.org/wiki/Strife_dead_ends#Leave_Administration_early
			// Just get rid of the barriers that prevent backtracking from The Bailey
			SetLineSpecial(2249, 0);
			OffsetSectorPlane(8, Sector.ceiling, 8);
			SetSectorTexture(8, Sector.ceiling, "F_GENTAN");
			OffsetSectorPlane(10, Sector.ceiling, 8);
			SetSectorTexture(10, Sector.ceiling, "F_GENTAN");
			ClearSectorTags(8);
			ClearSectorTags(10);
			SetLineSpecial(1723, 0);
			SetLineSpecial(1887, 0);
			break;

		case '252AF75417C87B680AD2CA48E52DC716': // strife1.wad map30 - Abandoned Front Base
		case 'C45DCE904B6D4F9AC76B025499D9281E': // sve.wad map30 - Abandoned Front Base
			// Fix prison teleporter flat offset
			Level.Sectors[38].AddXOffset(Sector.floor, 32.0);
			break;
		}
	}
}
