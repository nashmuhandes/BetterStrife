// Copyright 2021 - 2024 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// BetterStrifeLevelPostProcessor
//
//===========================================================================

class BetterStrifeLevelPostProcessor : LevelPostProcessor
{
	protected void Apply(Name checksum, String mapname)
	{
		SpawnStrifeQuestMarkers(checksum, mapname);
		SpawnSVEQuestMarkers(checksum, mapname);
		//SpawnExtraMerchants(checksum, mapname);
		SpawnLiquidSounds(checksum, mapname);
		SpawnTavernAmbience(checksum, mapname);
		FixMaps(checksum, mapname);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SpawnExtraMerchants(Name checksum, String mapname)
	{
		int t;
		int p;

		switch (checksum)
		{
		default:
		case 'none':
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SpawnLiquidSounds(Name checksum, String mapname)
	{
		int stickInWater = 215;
		int invisibleStick = 15556;
		int slime = 15557;

		switch (checksum)
		{
		default:
		case 'none':
			return;

		case '92DD353943BE589C175FEFC969597950': // strife1.wad map01 - Sanctuary
		case 'E80503C91F1304142FFDF51EEA7A9653': // sve.wad map01 - Sanctuary
			AddThing(invisibleStick, (2296, 5432, 0), 0);
			AddThing(invisibleStick, (2864, 5264, 0), 0);
			AddThing(invisibleStick, (2688, 5824, 0), 0);
			AddThing(invisibleStick, (2416, 6048, 0), 0);
			AddThing(invisibleStick, (2208, 5840, 0), 0);
			AddThing(invisibleStick, (1792, 5632, 0), 0);
			break;

		case '22DC1F95CD9A03D23467FD638264FFBC': // strife1.wad map02 - Town
		case 'A4ABA612A8FE682787DEBEAF70637836': // sve.wad map02 - Town
			AddThing(invisibleStick, (1696, 6240, 0), 0);
			AddThing(slime, (3744, 3712, 0), 0);
			AddThing(slime, (3872, 3712, 0), 0);
			AddThing(slime, (4000, 3712, 0), 0);
			AddThing(slime, (556, 3272, 0), 0);
			AddThing(slime, (3584, 4672, 0), 0);
			AddThing(slime, (3502, 4430, 0), 0);
			AddThing(slime, (3776, 4480, 0), 0);
			AddThing(slime, (3968, 4608, 0), 0);
			AddThing(slime, (3488, 4224, 0), 0);
			AddThing(slime, (3840, 4288, 0), 0);
			AddThing(slime, (4206, 4334, 0), 0);
			AddThing(slime, (3616, 3968, 0), 0);
			AddThing(slime, (3968, 3968, 0), 0);
			AddThing(slime, (3968, 3968, 0), 0);
			AddThing(slime, (3568, 5224, 0), 0);
			AddThing(slime, (3584, 5576, 0), 0);
			AddThing(slime, (3848, 3848, 0), 0);
			AddThing(slime, (3672, 5824, 0), 0);
			AddThing(slime, (3872, 5976, 0), 0);
			AddThing(slime, (3600, 6088, 0), 0);
			AddThing(slime, (3784, 6264, 0), 0);
			break;

		case '20C20E1FC803F192613A52A62872BCDE': // strife1.wad map03 - Front Base
		case '53C6581CB9BC334D6FF0B2E7DAA16944': // sve.wad map03 - Front Base
			AddThing(invisibleStick, (64, 1312, 0), 0);
			AddThing(invisibleStick, (-128, 960, 0), 0);
			break;

		case '8AB955C176204FC3DC8008A01BDDEE87': // strife1.wad map04 - Power Station
		case '4BA20A2DAE4D52196E6B06B142EAE9EB': // sve.wad map04 - Power Station
			// The large body of water outside
			AddThing(stickInWater, (2272, 2080, 0), 0);
			AddThing(invisibleStick, (2016, 2592, 0), 0);
			AddThing(invisibleStick, (1728, 2944, 0), 0);
			AddThing(invisibleStick, (2752, 2688, 0), 0);
			AddThing(invisibleStick, (2528, 2848, 0), 0);
			AddThing(invisibleStick, (3328, 2976, 0), 0);
			AddThing(invisibleStick, (3808, 3392, 0), 0);
			AddThing(invisibleStick, (3360, 3616, 0), 0);
			AddThing(invisibleStick, (2816, 3296, 0), 0);
			AddThing(invisibleStick, (2912, 3936, 0), 0);
			AddThing(invisibleStick, (2912, 2400, 0), 0);
			AddThing(invisibleStick, (3360, 2688, 0), 0);
			AddThing(invisibleStick, (4032, 3136, 0), 0);
			AddThing(invisibleStick, (3840, 3680, 0), 0);
			AddThing(invisibleStick, (4288, 3840, 0), 0);
			AddThing(invisibleStick, (4576, 4288, 0), 0);
			AddThing(invisibleStick, (5216, 4224, 0), 0);
			AddThing(invisibleStick, (5216, 4448, 0), 0);
			AddThing(invisibleStick, (5216, 4000, 0), 0);
			AddThing(invisibleStick, (3008, 4224, 0), 0);
			AddThing(invisibleStick, (3616, 4160, 0), 0);
			AddThing(invisibleStick, (4128, 4192, 0), 0);
			AddThing(invisibleStick, (2912, 4640, 0), 0);
			AddThing(invisibleStick, (3296, 4864, 0), 0);
			AddThing(invisibleStick, (2944, 5376, 0), 0);
			AddThing(invisibleStick, (3904, 4672, 0), 0);
			AddThing(invisibleStick, (3776, 5472, 0), 0);
			AddThing(invisibleStick, (2944, 6048, 0), 0);
			AddThing(invisibleStick, (2560, 5664, 0), 0);
			AddThing(invisibleStick, (3360, 5984, 0), 0);
			AddThing(invisibleStick, (4384, 4960, 0), 0);
			AddThing(invisibleStick, (2112, 5952, 0), 0);
			AddThing(invisibleStick, (1792, 5696, 0), 0);
			AddThing(invisibleStick, (1056, 5856, 0), 0);
			AddThing(invisibleStick, (736, 5216, 0), 0);
			AddThing(invisibleStick, (896, 4800, 0), 0);
			AddThing(invisibleStick, (384, 4704, 0), 0);
			AddThing(invisibleStick, (864, 4448, 0), 0);
			AddThing(invisibleStick, (352, 4480, 0), 0);
			AddThing(invisibleStick, (832, 5504, 0), 0);
			// Some watery areas inside
			AddThing(invisibleStick, (-1376, 5792, 0), 0);
			AddThing(invisibleStick, (-1330, 5614, 0), 0);
			AddThing(invisibleStick, (-1120, 5696, 0), 0);
			AddThing(invisibleStick, (-896, 5760, 0), 0);
			AddThing(invisibleStick, (-914, 5454, 0), 0);
			AddThing(invisibleStick, (-640, 5600, 0), 0);
			AddThing(invisibleStick, (-1120, 5440, 0), 0);
			AddThing(invisibleStick, (-2560, 4416, 0), 0);
			AddThing(invisibleStick, (-2656, 4320, 0), 0);
			AddThing(invisibleStick, (4320, 4288, 0), 0);
			AddThing(invisibleStick, (-2688, 4128, 0), 0);
			AddThing(invisibleStick, (-2560, 4064, 0), 0);
			AddThing(invisibleStick, (-2432, 4128, 0), 0);
			AddThing(104, (-2560, 3808, 0), 0); // waterfall splashes
			AddThing(104, (-2560, 4640, 0), 0); // waterfall splashes
			break;

		case '8DC5B4A41E35089C9789F7EC6393A015': // strife1.wad map05 - Prison
		case 'F46DEB7B2ABEDB9677269B1539F7ABB8': // sve.wad map05 - Prison
			AddThing(slime, (3744, 3712, 0), 0);
			break;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SpawnTavernAmbience(Name checksum, String mapname)
	{
		int t;
		int p;

		// place tavern ambience and assign an NPC to it (via TID) for sound volume functions
		int tid = 5555500;

		switch (checksum)
		{
		default:
		case 'none':
			return;

		case '22DC1F95CD9A03D23467FD638264FFBC': // strife1.wad map02 - Town
		case 'A4ABA612A8FE682787DEBEAF70637836': // sve.wad map02 - Town
			t = AddThing(15555, (2120, 4640, 16), 0); tid++; SetThingID(t, tid); SetThingID(73, tid);
			t = AddThing(15555, (2040, 4472, 0), 0); tid++; SetThingID(t, tid); SetThingID(68, tid);
			t = AddThing(15555, (1984, 4248, 32), 0); tid++; SetThingID(t, tid); SetThingID(90, tid);
			t = AddThing(15555, (2592, 4256, 35), 0); tid++; SetThingID(t, tid); SetThingID(91, tid);
			t = AddThing(15555, (2592, 4416, 0), 0); tid++; SetThingID(t, tid); SetThingID(113, tid);
			t = AddThing(15555, (2576, 4704, 24), 0); tid++; SetThingID(t, tid); SetThingID(92, tid);
			t = AddThing(15555, (2208, 4704, 50), 0); tid++; SetThingID(t, tid); SetThingID(72, tid);
			t = AddThing(15555, (2312, 4440, 20), 0); tid++; SetThingID(t, tid); SetThingID(71, tid);
			break;

		case '777F7085371D7020872E10089AADB764': // strife1.wad map23 - Order Commons
		case '13BDF7D41E33E302D21234316A600BBA': // sve.wad map23 - Order Commons
			t = AddThing(15555, (2176, 320, 32), 0); tid++; SetThingID(t, tid); SetThingID(383, tid);
			t = AddThing(15555, (2176, 192, 32), 0); tid++; SetThingID(t, tid); SetThingID(341, tid);
			t = AddThing(15555, (1920, 256, 48), 0); tid++; SetThingID(t, tid); SetThingID(342, tid);
			t = AddThing(15555, (2080, 128, 56), 0); tid++; SetThingID(t, tid); SetThingID(340, tid);
			t = AddThing(15555, (2304, 192, 72), 0); tid++; SetThingID(t, tid); SetThingID(396, tid);
			t = AddThing(15555, (1920, 64, 64), 0); tid++; SetThingID(t, tid); SetThingID(390, tid);
			t = AddThing(15555, (2080, -128, 56), 0); tid++; SetThingID(t, tid); SetThingID(392, tid);
			t = AddThing(15555, (2272, -128, 48), 0); tid++; SetThingID(t, tid); SetThingID(395, tid);
			t = AddThing(15555, (2048, -448, 48), 0); tid++; SetThingID(t, tid); SetThingID(349, tid);
			t = AddThing(15555, (2208, -224, 88), 0); tid++; SetThingID(t, tid); SetThingID(399, tid);
			t = AddThing(15555, (2272, -352, 24), 0); tid++; SetThingID(t, tid); SetThingID(348, tid);
			break;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void FixMaps(Name checksum, String mapname)
	{
		switch (checksum)
		{
		default:
		case 'none':
			return;

		case '22DC1F95CD9A03D23467FD638264FFBC': // strife1.wad map02 - Town
		case 'A4ABA612A8FE682787DEBEAF70637836': // sve.wad map02 - Town
			// get rid of misplaced lamp in the void (only in the vanilla IWAD though)
			if (checksum == '22DC1F95CD9A03D23467FD638264FFBC')
				SetThingEdNum(260, 0);
			break;

		case '4A79D4C48352804FAB3557EE423ADAFE': // strife1.wad map07 - Castle
		case 'ECB3421D4C79C67EBC9342E0579F8804': // sve.wad map07 - Castle
			// Fix missing textures on the platform just before the entrance to The Programmer's Keep
			SetWallTexture(2778, Line.back, Side.bottom, "CONCRT01");
			SetWallTexture(2779, Line.back, Side.bottom, "CONCRT01");
			SetWallTexture(2780, Line.back, Side.bottom, "CONCRT01");
			SetWallTexture(2781, Line.back, Side.bottom, "CONCRT01");
			SetLineFlags(2778, Line.ML_DONTPEGTOP | Line.ML_DONTPEGBOTTOM);
			SetLineFlags(2779, Line.ML_DONTPEGTOP | Line.ML_DONTPEGBOTTOM);
			SetLineFlags(2780, Line.ML_DONTPEGTOP | Line.ML_DONTPEGBOTTOM);
			SetLineFlags(2781, Line.ML_DONTPEGTOP | Line.ML_DONTPEGBOTTOM);
			break;

		case '28CB8D6614024C51C8DB00C7ADBFD857': // strife1.wad map11 - Borderlands
		case '1097B8706E00273294389D1FEB5E94A5': // sve.wad map11 - Borderlands
			// Fix New Front Base teleporter flat offset
			Level.Sectors[224].AddXOffset(Sector.floor, -24.0);
			break;

		case 'E3E6ABE44B1C034F19385AD1B19BEC97': // strife1.wad map16 - Fortress: Bishop's Tower
		case '900B1CAC3AB7DF6C2FFB5C429C523FB7': // sve.wad map16 - Fortress: Bishop's Tower
			// Fix missing textures
			SetWallTexture(2827, Line.back, Side.bottom, "AZWAL04");
			SetWallTexture(2660, Line.back, Side.bottom, "AZWAL04");
			break;

		case '1240E48EE30E52D7742DC3785BC0C919': // strife1.wad map19 - Fortress: Security Complex
		case '5215723CBF14B74A0CB901473434576B': // sve.wad map19 - Fortress: Security Complex
			// Fix dead end caused by exiting Administration before destroying the computer
			// https://doomwiki.org/wiki/Strife_dead_ends#Leave_Administration_early
			// Just get rid of the barriers that prevent backtracking from The Bailey
			SetLineSpecial(2249, 0);
			OffsetSectorPlane(8, Sector.ceiling, 8);
			SetSectorTexture(8, Sector.ceiling, "F_GENTAN");
			OffsetSectorPlane(10, Sector.ceiling, 8);
			SetSectorTexture(10, Sector.ceiling, "F_GENTAN");
			ClearSectorTags(8);
			ClearSectorTags(10);
			SetLineSpecial(1723, 0);
			SetLineSpecial(1887, 0);
			break;

		case '252AF75417C87B680AD2CA48E52DC716': // strife1.wad map30 - Abandoned Front Base
		case 'C45DCE904B6D4F9AC76B025499D9281E': // sve.wad map30 - Abandoned Front Base
			// Fix prison teleporter flat offset
			Level.Sectors[38].AddXOffset(Sector.floor, 32.0);
			break;
		}
	}
}
