// Copyright 2021 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// BetterStrifeQuestHandler
//
//===========================================================================

class BetterStrifeQuestHandler : EventHandler
{
	BetterStrifeQuest quest;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void NewGame(void)
	{
		CreateQuest();
	}

	override void WorldTick(void)
	{
		UpdateQuest();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void CreateQuest(void)
	{
		if (!quest)
		{
			ThinkerIterator it = ThinkerIterator.Create("BetterStrifeQuest", Thinker.STAT_STATIC);
			let p = BetterStrifeQuest(it.Next());
			if (!p)
			{
				quest = new("BetterStrifeQuest").Init();
			}
		}
	}

	void UpdateQuest(void)
	{
		// FIX ME: this currently only checks quest status on the first player lol
		PlayerInfo plr = players[0];
		if (playeringame[0] && plr)
		{
			String txt = plr.LogText;
			int num = txt.Mid("\$TXT_ILOG".Length()).ToInt();
			quest.SetQuest(num);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	bool HasQuestItem(class<QuestItem> qi)
	{
		bool result = false;

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i])
			{
				let pmo = PlayerPawn(players[i].mo);
				if (pmo && pmo.CountInv(qi) > 0)
				{
					// someone has the quest item, no need to continue searching
					result = true;
					break;
				}
			}
		}

		return result;
	}
}
