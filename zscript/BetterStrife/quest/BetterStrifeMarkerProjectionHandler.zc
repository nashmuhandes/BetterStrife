// Copyright 2021 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// BetterStrifeMarkerProjectionHandler
//
//===========================================================================

class BetterStrifeMarkerProjectionHandler : StaticEventHandler
{
	transient ui CVar cvExitMarkers;
	transient ui CVar cvQuestMarkers;

	override void RenderUnderlay(RenderEvent e)
	{
		PlayerInfo plr;

		if (e.Camera is "PlayerPawn" && e.Camera == players[consoleplayer].camera && e.Camera.player)
		{
			plr = e.Camera.player;
		}

		if (!plr)
			return;

		// draw exit map markers
		DrawExitMapMarkers(e);

		// draw quest markers
		DrawQuestMarkers(e);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	ui void DrawExitMapMarkers(RenderEvent e)
	{
		let sb = StrifeStatusBar(StatusBar);
		if (!sb)
			return;

		if (automapactive)
			return;

		let mnu = Menu.GetCurrentMenu();
		if (mnu)
			return;

		PlayerPawn pmo = PlayerPawn(players[consoleplayer].mo);
		if (!pmo)
			return;

		if (!pmo.player)
			return;

		// cache CVars
		if (!cvExitMarkers)
			cvExitMarkers = CVar.GetCVar("betterstrife_exitmarkers", pmo.player);
		if (!cvExitMarkers)
			return;

		bool showExitMarkers = false;

		// only show exit lines when the Objectives popup is open...
		if (cvExitMarkers.GetInt() == 1)
		{
			if (sb && sb.CurrentPop == 1)
			{
				showExitMarkers = true;
			}
		}
		// ... or optionally, always show exit markers
		else if (cvExitMarkers.GetInt() == 2)
		{
			showExitMarkers = true;
		}

		if (showExitMarkers)
		{
			// store old view clip
			int ox, oy, ow, oh;
			[ox, oy, ow, oh] = Screen.GetClipRect();

			// temporarily set new view clip
			int nx, ny, nw, nh;
			[nx, ny, nw, nh] = Screen.GetViewWindow();
			Screen.SetClipRect(nx, ny, nw, nh);

			BetterStrifeGutamaticsMatrix worldToClip = BetterStrifeGutamaticsMatrix.WorldToClip(e.ViewPos, e.ViewAngle, e.ViewPitch, e.ViewRoll, players[consoleplayer].FOV);

			Actor projActor;
			ThinkerIterator it = ThinkerIterator.Create("BetterStrifeExitMarker");
			while ((projActor = Actor(it.Next())) != NULL)
			{
				// don't draw deactivated markers
				if (projActor.bDormant)
					continue;

				// don't draw if the marker hasn't been seen (duh)
				if (!BetterStrifeExitMarker(projActor).IsMarkerSeen())
					continue;

				// fade alpha by distance
				double alpha = 1.0;
				double maxDist = 1000.0;
				double distFade = pmo.Distance3D(projActor);
				double distFarFadeStart = maxDist * 0.5;
				if (distFade >= distFarFadeStart)
				{
					double fade = 1.0 - (distFade - distFarFadeStart) / distFarFadeStart;
					alpha *= fade;
				}
				if (alpha < 0.2)
					alpha = 0.2;

				Vector3 adjustedWorldPos = e.ViewPos + Level.Vec3Diff(e.ViewPos, projActor.Pos);
				Vector3 ndcPos = worldToClip.MultiplyVector3(adjustedWorldPos + (0, 0, projActor.Height * 0.5)).AsVector3();
				if (ndcPos.Z <= 1 && ndcPos.Z >= -1)
				{
					Vector2 drawPos = BetterStrifeGutamaticsGlobalMaths.NDCToViewPort(ndcPos);

					// draw exit icon
					TextureID tex = TexMan.CheckForTexture("SXITA0", TexMan.Type_Sprite);
					if (tex.IsValid())
					{
						drawPos = BetterStrifeGutamaticsGlobalMaths.NDCToViewPort(ndcPos);
						Screen.DrawTexture(tex, false,
							drawPos.X,
							drawPos.Y,
							DTA_Alpha, alpha,
							DTA_CleanNoMove, true);
					}

					// draw level name
					int exitTag = BetterStrifeExitMarker(projActor).exitTag;

					// prepend 0 to the level number if necessary
					String levelNumber = exitTag < 10 ? "0" .. String.Format("%d", exitTag) : String.Format("%d", exitTag);
					String levelName = StringTable.Localize("$TXT_STRIFE_MAP" .. levelNumber);

					// strip the "Area xx:" part of the level name
					Array<String> split;
					levelName.Split(split, ":");
					String levelNameSplit = "";
					for (int i = 1; i < split.Size(); i++)
					{
						// hack to re-add the colon for the first part of the name lol
						levelNameSplit = levelNameSplit .. split[i];
						if (split.Size() > 1 && i == 1 && i < split.Size() - 1)
							levelNameSplit = levelNameSplit .. ":";
					}

					Screen.DrawText(SmallFont, Font.CR_Yellow,
						drawPos.X + (SmallFont.StringWidth(" ") * CleanXFac),
						drawPos.Y - (SmallFont.GetHeight() * CleanYFac / 2.0),
						levelNameSplit,
						DTA_Alpha, alpha,
						DTA_CleanNoMove, true);
				}
			}

			// restore view clip
			Screen.SetClipRect(ox, oy, ow, oh);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	ui void DrawQuestMarkers(RenderEvent e)
	{
		let sb = StrifeStatusBar(StatusBar);
		if (!sb)
			return;

		if (automapactive)
			return;

		let mnu = Menu.GetCurrentMenu();
		if (mnu)
			return;

		PlayerPawn pmo = PlayerPawn(players[consoleplayer].mo);
		if (!pmo)
			return;

		if (!pmo.player)
			return;

		// cache CVars
		if (!cvQuestMarkers)
			cvQuestMarkers = CVar.GetCVar("betterstrife_questmarkers", pmo.player);
		if (!cvQuestMarkers)
			return;

		bool showQuestMarkers = false;

		// only quest markers when the Objectives popup is open...
		if (cvQuestMarkers.GetInt() == 1)
		{
			if (sb && sb.CurrentPop == 1)
			{
				showQuestMarkers = true;
			}
		}
		// ... or optionally, always show exit markers
		else if (cvQuestMarkers.GetInt() == 2)
		{
			showQuestMarkers = true;
		}

		if (showQuestMarkers)
		{
			// store old view clip
			int ox, oy, ow, oh;
			[ox, oy, ow, oh] = Screen.GetClipRect();

			// temporarily set new view clip
			int nx, ny, nw, nh;
			[nx, ny, nw, nh] = Screen.GetViewWindow();
			Screen.SetClipRect(nx, ny, nw, nh);

			BetterStrifeGutamaticsMatrix worldToClip = BetterStrifeGutamaticsMatrix.WorldToClip(e.ViewPos, e.ViewAngle, e.ViewPitch, e.ViewRoll, players[consoleplayer].FOV);

			Actor projActor;
			ThinkerIterator it = ThinkerIterator.Create("BetterStrifeQuestMarker");
			while ((projActor = Actor(it.Next())) != NULL)
			{
				// don't draw deactivated markers
				if (projActor.bDormant)
					continue;

				// fade alpha by distance
				double alpha = 1.0;
				double maxDist = 1000.0;
				double distFade = pmo.Distance3D(projActor);
				double distFarFadeStart = maxDist * 0.5;
				if (distFade >= distFarFadeStart)
				{
					double fade = 1.0 - (distFade - distFarFadeStart) / distFarFadeStart;
					alpha *= fade;
				}
				if (alpha < 0.2)
					alpha = 0.2;

				Vector3 adjustedWorldPos = e.ViewPos + Level.Vec3Diff(e.ViewPos, projActor.Pos);
				Vector3 ndcPos = worldToClip.MultiplyVector3(adjustedWorldPos + (0, 0, projActor.Height * 0.5)).AsVector3();
				if (ndcPos.Z <= 1 && ndcPos.Z >= -1)
				{
					Vector2 drawPos = BetterStrifeGutamaticsGlobalMaths.NDCToViewPort(ndcPos);

					// draw quest marker icon
					TextureID tex = TexMan.CheckForTexture("QMRKA0", TexMan.Type_Sprite);
					if (tex.IsValid())
					{
						drawPos = BetterStrifeGutamaticsGlobalMaths.NDCToViewPort(ndcPos);
						Screen.DrawTexture(tex, false,
							drawPos.X,
							drawPos.Y,
							DTA_Alpha, alpha,
							DTA_CleanNoMove, true);
					}

					// draw level name
					/*
					int exitTag = BetterStrifeExitMarker(projActor).exitTag;

					// prepend 0 to the level number if necessary
					String levelNumber = exitTag < 10 ? "0" .. String.Format("%d", exitTag) : String.Format("%d", exitTag);
					String levelName = StringTable.Localize("$TXT_STRIFE_MAP" .. levelNumber);

					// strip the "Area xx:" part of the level name
					Array<String> split;
					levelName.Split(split, ":");
					String levelNameSplit = "";
					for (int i = 1; i < split.Size(); i++)
					{
						// hack to re-add the colon for the first part of the name lol
						levelNameSplit = levelNameSplit .. split[i];
						if (split.Size() > 1 && i == 1 && i < split.Size() - 1)
							levelNameSplit = levelNameSplit .. ":";
					}

					Screen.DrawText(SmallFont, Font.CR_Yellow,
						drawPos.X + (SmallFont.StringWidth(" ") * CleanXFac),
						drawPos.Y - (SmallFont.GetHeight() * CleanYFac / 2.0),
						levelNameSplit,
						DTA_Alpha, alpha,
						DTA_CleanNoMove, true);
					*/
				}
			}

			// restore view clip
			Screen.SetClipRect(ox, oy, ow, oh);
		}
	}
}
