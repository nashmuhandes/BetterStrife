// Copyright 2021 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// BetterStrifeQuest
//
//===========================================================================

class BetterStrifeQuest : Thinker
{
	// Values correspond to the respective log numbers defined in the Strife IWAD.
	// This is the best way I can think of that doesn't force me to invest so much
	// time into defining the quest statuses by hand.
	enum ECurrentQuest
	{
		CQ_FINDHELP = 0,
		CQ_GETBELDINSRING = 1003,
		CQ_FOUNDBELDINSRING = CQ_GETBELDINSRING,
		CQ_LOOKFORREBELBASE1 = 2,
		CQ_LOOKFORREBELBASE2 = 3,
		CQ_LOOKFORREBELBASE3 = 4,
		CQ_TALKTOMACIL1 = 4,
		CQ_VISITIRALE1 = 1006,
		CQ_TALKTOGOVERNOR1 = 1006,
		CQ_TALKTOMACGUFFIN = 11,
		CQ_FOUNDBROKENCOUPLING = 15,
		CQ_DESTROYEDFRONTCOUPLING = 13,
		CQ_TOOKOUTSCANNINGTEAM = 14,
		CQ_FINDDERWIN = 1008,
		CQ_GOTDERWINSEAR = CQ_FINDDERWIN,
		CQ_GOTOPRISON = 1009,
		CQ_TALKTOWARDEN = 1009,
		CQ_DONETALKINGTOWARDEN = 1010,
		CQ_BROKEINTOPRISON = 18,
		CQ_LOOKFORJUDGE = 19,
		CQ_CUTJUDGESHAND = 20,
		CQ_FREEDPRISONERS = 21,
		CQ_TALKTOMACIL2 = CQ_FREEDPRISONERS,
		CQ_DESTROYPOWERCRYSTAL = 1011,
	}

	bool initDone;
	int currentQuest;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	BetterStrifeQuest Init(void)
	{
		ChangeStatNum(STAT_STATIC);

		if (!initDone)
		{
			// set the first quest when starting the game
			if (Level.totaltime == 0)
			{
				currentQuest = CQ_FINDHELP;
			}

			initDone = true;
		}

		return self;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static clearscope BetterStrifeQuest GetInstance(void)
	{
		ThinkerIterator it = ThinkerIterator.Create("BetterStrifeQuest", STAT_STATIC);
		let p = BetterStrifeQuest(it.Next());
		if (p) return p;
		else return NULL;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static clearscope int GetQuestLogNumber(void)
	{
		// FIX ME: this currently only checks quest status on the first player lol
		PlayerInfo plr = players[0];
		if (playeringame[0] && plr)
		{
			String txt = plr.LogText;
			int num = txt.Mid("\$TXT_ILOG".Length()).ToInt();
			return num;
		}
		return -1;
	}

	void SetQuest(int q)
	{
		currentQuest = q;
	}

	clearscope int GetCurrentQuest(void)
	{
		return currentQuest;
	}

	void UpdateQuest(void)
	{
		SetQuest(GetQuestLogNumber());
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		UpdateQuest();
		/*
		ThinkerIterator it = ThinkerIterator.Create("BetterStrifeQuestMarker");
		Actor mo;
		int count;
		while (mo = Actor(it.Next()))
		{
			count++;
		}
		Console.Printf("%d quest markers in this map", count);
		*/
	}
}
